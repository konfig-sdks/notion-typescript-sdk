/* tslint:disable */
/* eslint-disable */
/*
Notion API

Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SearchByTitle400Response } from '../models';
// @ts-ignore
import { SearchByTitle429Response } from '../models';
// @ts-ignore
import { SearchByTitleRequest } from '../models';
// @ts-ignore
import { SearchByTitleRequestFilter } from '../models';
// @ts-ignore
import { SearchByTitleRequestSort } from '../models';
// @ts-ignore
import { SearchByTitleResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search by title
         * @param {string} notionVersion 
         * @param {SearchByTitleRequest} [searchByTitleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byTitle: async (notionVersion: string, searchByTitleRequest?: SearchByTitleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notionVersion' is not null or undefined
            assertParamExists('byTitle', 'notionVersion', notionVersion)
            const localVarPath = `/v1/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: searchByTitleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/search',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(searchByTitleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Search by title
         * @param {SearchApiByTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byTitle(requestParameters: SearchApiByTitleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchByTitleResponse>> {
            const searchByTitleRequest: SearchByTitleRequest = {
                query: requestParameters.query,
                sort: requestParameters.sort,
                filter: requestParameters.filter,
                start_cursor: requestParameters.start_cursor,
                page_size: requestParameters.page_size
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.byTitle(requestParameters.notionVersion, searchByTitleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Search by title
         * @param {SearchApiByTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byTitle(requestParameters: SearchApiByTitleRequest, options?: AxiosRequestConfig): AxiosPromise<SearchByTitleResponse> {
            return localVarFp.byTitle(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for byTitle operation in SearchApi.
 * @export
 * @interface SearchApiByTitleRequest
 */
export type SearchApiByTitleRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SearchApiByTitle
    */
    readonly notionVersion: string
    
} & SearchByTitleRequest

/**
 * SearchApiGenerated - object-oriented interface
 * @export
 * @class SearchApiGenerated
 * @extends {BaseAPI}
 */
export class SearchApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Search by title
     * @param {SearchApiByTitleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiGenerated
     */
    public byTitle(requestParameters: SearchApiByTitleRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).byTitle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
