/* tslint:disable */
/* eslint-disable */
/*
Notion API

Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PageCreateNewPage404Response } from '../models';
// @ts-ignore
import { PageCreateNewPage429Response } from '../models';
// @ts-ignore
import { PageCreateNewPageRequest } from '../models';
// @ts-ignore
import { PageCreateNewPageResponse } from '../models';
// @ts-ignore
import { PageGetPageResponse } from '../models';
// @ts-ignore
import { PageUpdateProperties404Response } from '../models';
// @ts-ignore
import { PageUpdateProperties429Response } from '../models';
// @ts-ignore
import { PageUpdatePropertiesRequest } from '../models';
// @ts-ignore
import { PageUpdatePropertiesResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PageApi - axios parameter creator
 * @export
 */
export const PageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a page
         * @param {string} notionVersion 
         * @param {PageCreateNewPageRequest} [pageCreateNewPageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPage: async (notionVersion: string, pageCreateNewPageRequest?: PageCreateNewPageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notionVersion' is not null or undefined
            assertParamExists('createNewPage', 'notionVersion', notionVersion)
            const localVarPath = `/v1/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: pageCreateNewPageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/pages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(pageCreateNewPageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a page
         * @param {string} pageId Identifier for a Notion page
         * @param {string} notionVersion 
         * @param {string} [filterProperties] A list of page property value IDs associated with the page. Use this param to limit the response to a specific page property value or values. To retrieve multiple properties, specify each page property ID. For example: &#x60;?filter_properties&#x3D;iAk8&amp;filter_properties&#x3D;b7dh&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage: async (pageId: string, notionVersion: string, filterProperties?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getPage', 'pageId', pageId)
            // verify required parameter 'notionVersion' is not null or undefined
            assertParamExists('getPage', 'notionVersion', notionVersion)
            const localVarPath = `/v1/pages/{page_id}`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId !== undefined ? pageId : `-page_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (filterProperties !== undefined) {
                localVarQueryParameter['filter_properties'] = filterProperties;
            }

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/pages/{page_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a page property item
         * @param {string} pageId Identifier for a Notion page
         * @param {string} propertyId Identifier for a page [property](https://developers.notion.com/reference/page#all-property-values)
         * @param {number} [pageSize] For paginated properties. The max number of property item objects on a page. The default size is 100
         * @param {string} [startCursor] For paginated properties.
         * @param {string} [notionVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyItem: async (pageId: string, propertyId: string, pageSize?: number, startCursor?: string, notionVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('getPropertyItem', 'pageId', pageId)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('getPropertyItem', 'propertyId', propertyId)
            const localVarPath = `/v1/pages/{page_id}/properties/{property_id}`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId !== undefined ? pageId : `-page_id-`)))
                .replace(`{${"property_id"}}`, encodeURIComponent(String(propertyId !== undefined ? propertyId : `-property_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (startCursor !== undefined) {
                localVarQueryParameter['start_cursor'] = startCursor;
            }

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/pages/{page_id}/properties/{property_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update page properties
         * @param {string} pageId The identifier for the Notion page to be updated.
         * @param {string} [notionVersion] 
         * @param {PageUpdatePropertiesRequest} [pageUpdatePropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProperties: async (pageId: string, notionVersion?: string, pageUpdatePropertiesRequest?: PageUpdatePropertiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            assertParamExists('updateProperties', 'pageId', pageId)
            const localVarPath = `/v1/pages/{page_id}`
                .replace(`{${"page_id"}}`, encodeURIComponent(String(pageId !== undefined ? pageId : `-page_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: pageUpdatePropertiesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/pages/{page_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(pageUpdatePropertiesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a page
         * @param {PageApiCreateNewPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewPage(requestParameters: PageApiCreateNewPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCreateNewPageResponse>> {
            const pageCreateNewPageRequest: PageCreateNewPageRequest = {
                parent: requestParameters.parent,
                properties: requestParameters.properties,
                children: requestParameters.children,
                icon: requestParameters.icon,
                cover: requestParameters.cover
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewPage(requestParameters.notionVersion, pageCreateNewPageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a page
         * @param {PageApiGetPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPage(requestParameters: PageApiGetPageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageGetPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPage(requestParameters.pageId, requestParameters.notionVersion, requestParameters.filterProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a page property item
         * @param {PageApiGetPropertyItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPropertyItem(requestParameters: PageApiGetPropertyItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPropertyItem(requestParameters.pageId, requestParameters.propertyId, requestParameters.pageSize, requestParameters.startCursor, requestParameters.notionVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update page properties
         * @param {PageApiUpdatePropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProperties(requestParameters: PageApiUpdatePropertiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageUpdatePropertiesResponse>> {
            const pageUpdatePropertiesRequest: PageUpdatePropertiesRequest = {
                properties: requestParameters.properties,
                archived: requestParameters.archived,
                icon: requestParameters.icon,
                cover: requestParameters.cover
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProperties(requestParameters.pageId, requestParameters.notionVersion, pageUpdatePropertiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a page
         * @param {PageApiCreateNewPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPage(requestParameters: PageApiCreateNewPageRequest, options?: AxiosRequestConfig): AxiosPromise<PageCreateNewPageResponse> {
            return localVarFp.createNewPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a page
         * @param {PageApiGetPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(requestParameters: PageApiGetPageRequest, options?: AxiosRequestConfig): AxiosPromise<PageGetPageResponse> {
            return localVarFp.getPage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a page property item
         * @param {PageApiGetPropertyItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyItem(requestParameters: PageApiGetPropertyItemRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getPropertyItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update page properties
         * @param {PageApiUpdatePropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProperties(requestParameters: PageApiUpdatePropertiesRequest, options?: AxiosRequestConfig): AxiosPromise<PageUpdatePropertiesResponse> {
            return localVarFp.updateProperties(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewPage operation in PageApi.
 * @export
 * @interface PageApiCreateNewPageRequest
 */
export type PageApiCreateNewPageRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PageApiCreateNewPage
    */
    readonly notionVersion: string
    
} & PageCreateNewPageRequest

/**
 * Request parameters for getPage operation in PageApi.
 * @export
 * @interface PageApiGetPageRequest
 */
export type PageApiGetPageRequest = {
    
    /**
    * Identifier for a Notion page
    * @type {string}
    * @memberof PageApiGetPage
    */
    readonly pageId: string
    
    /**
    * 
    * @type {string}
    * @memberof PageApiGetPage
    */
    readonly notionVersion: string
    
    /**
    * A list of page property value IDs associated with the page. Use this param to limit the response to a specific page property value or values. To retrieve multiple properties, specify each page property ID. For example: `?filter_properties=iAk8&filter_properties=b7dh`.
    * @type {string}
    * @memberof PageApiGetPage
    */
    readonly filterProperties?: string
    
}

/**
 * Request parameters for getPropertyItem operation in PageApi.
 * @export
 * @interface PageApiGetPropertyItemRequest
 */
export type PageApiGetPropertyItemRequest = {
    
    /**
    * Identifier for a Notion page
    * @type {string}
    * @memberof PageApiGetPropertyItem
    */
    readonly pageId: string
    
    /**
    * Identifier for a page [property](https://developers.notion.com/reference/page#all-property-values)
    * @type {string}
    * @memberof PageApiGetPropertyItem
    */
    readonly propertyId: string
    
    /**
    * For paginated properties. The max number of property item objects on a page. The default size is 100
    * @type {number}
    * @memberof PageApiGetPropertyItem
    */
    readonly pageSize?: number
    
    /**
    * For paginated properties.
    * @type {string}
    * @memberof PageApiGetPropertyItem
    */
    readonly startCursor?: string
    
    /**
    * 
    * @type {string}
    * @memberof PageApiGetPropertyItem
    */
    readonly notionVersion?: string
    
}

/**
 * Request parameters for updateProperties operation in PageApi.
 * @export
 * @interface PageApiUpdatePropertiesRequest
 */
export type PageApiUpdatePropertiesRequest = {
    
    /**
    * The identifier for the Notion page to be updated.
    * @type {string}
    * @memberof PageApiUpdateProperties
    */
    readonly pageId: string
    
    /**
    * 
    * @type {string}
    * @memberof PageApiUpdateProperties
    */
    readonly notionVersion?: string
    
} & PageUpdatePropertiesRequest

/**
 * PageApiGenerated - object-oriented interface
 * @export
 * @class PageApiGenerated
 * @extends {BaseAPI}
 */
export class PageApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a page
     * @param {PageApiCreateNewPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApiGenerated
     */
    public createNewPage(requestParameters: PageApiCreateNewPageRequest, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).createNewPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a page
     * @param {PageApiGetPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApiGenerated
     */
    public getPage(requestParameters: PageApiGetPageRequest, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getPage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a page property item
     * @param {PageApiGetPropertyItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApiGenerated
     */
    public getPropertyItem(requestParameters: PageApiGetPropertyItemRequest, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).getPropertyItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update page properties
     * @param {PageApiUpdatePropertiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApiGenerated
     */
    public updateProperties(requestParameters: PageApiUpdatePropertiesRequest, options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).updateProperties(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
