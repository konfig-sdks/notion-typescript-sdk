/* tslint:disable */
/* eslint-disable */
/*
Notion API

Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DatabaseCreateNewDatabaseRequest } from '../models';
// @ts-ignore
import { DatabaseExecuteQueryRequest } from '../models';
// @ts-ignore
import { DatabaseExecuteQueryResponse } from '../models';
// @ts-ignore
import { DatabaseGetDatabase404Response } from '../models';
// @ts-ignore
import { DatabaseGetDatabase429Response } from '../models';
// @ts-ignore
import { DatabaseGetDatabaseResponse } from '../models';
// @ts-ignore
import { DatabaseUpdateDatabase400Response } from '../models';
// @ts-ignore
import { DatabaseUpdateDatabase404Response } from '../models';
// @ts-ignore
import { DatabaseUpdateDatabase429Response } from '../models';
// @ts-ignore
import { DatabaseUpdateDatabaseRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DatabaseApi - axios parameter creator
 * @export
 */
export const DatabaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a database
         * @param {string} notionVersion 
         * @param {DatabaseCreateNewDatabaseRequest} [databaseCreateNewDatabaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDatabase: async (notionVersion: string, databaseCreateNewDatabaseRequest?: DatabaseCreateNewDatabaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notionVersion' is not null or undefined
            assertParamExists('createNewDatabase', 'notionVersion', notionVersion)
            const localVarPath = `/v1/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databaseCreateNewDatabaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/databases',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databaseCreateNewDatabaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query a database
         * @param {string} databaseId Identifier for a Notion database.
         * @param {string} notionVersion 
         * @param {string} [filterProperties] A list of page property value IDs associated with the database. Use this param to limit the response to a specific page property value or values for pages that meet the &#x60;filter&#x60; criteria.
         * @param {DatabaseExecuteQueryRequest} [databaseExecuteQueryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQuery: async (databaseId: string, notionVersion: string, filterProperties?: string, databaseExecuteQueryRequest?: DatabaseExecuteQueryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('executeQuery', 'databaseId', databaseId)
            // verify required parameter 'notionVersion' is not null or undefined
            assertParamExists('executeQuery', 'notionVersion', notionVersion)
            const localVarPath = `/v1/databases/{database_id}/query`
                .replace(`{${"database_id"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-database_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (filterProperties !== undefined) {
                localVarQueryParameter['filter_properties'] = filterProperties;
            }

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databaseExecuteQueryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/databases/{database_id}/query',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databaseExecuteQueryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a database
         * @param {string} databaseId An identifier for the Notion database.
         * @param {string} notionVersion 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatabase: async (databaseId: string, notionVersion: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('getDatabase', 'databaseId', databaseId)
            // verify required parameter 'notionVersion' is not null or undefined
            assertParamExists('getDatabase', 'notionVersion', notionVersion)
            const localVarPath = `/v1/databases/{database_id}`
                .replace(`{${"database_id"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-database_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/databases/{database_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a database
         * @param {string} databaseId identifier for a Notion database
         * @param {string} [notionVersion] 
         * @param {DatabaseUpdateDatabaseRequest} [databaseUpdateDatabaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatabase: async (databaseId: string, notionVersion?: string, databaseUpdateDatabaseRequest?: DatabaseUpdateDatabaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('updateDatabase', 'databaseId', databaseId)
            const localVarPath = `/v1/databases/{database_id}`
                .replace(`{${"database_id"}}`, encodeURIComponent(String(databaseId !== undefined ? databaseId : `-database_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: databaseUpdateDatabaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/databases/{database_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(databaseUpdateDatabaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseApi - functional programming interface
 * @export
 */
export const DatabaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a database
         * @param {DatabaseApiCreateNewDatabaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDatabase(requestParameters: DatabaseApiCreateNewDatabaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const databaseCreateNewDatabaseRequest: DatabaseCreateNewDatabaseRequest = {
                title: requestParameters.title,
                parent: requestParameters.parent,
                properties: requestParameters.properties
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDatabase(requestParameters.notionVersion, databaseCreateNewDatabaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query a database
         * @param {DatabaseApiExecuteQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeQuery(requestParameters: DatabaseApiExecuteQueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseExecuteQueryResponse>> {
            const databaseExecuteQueryRequest: DatabaseExecuteQueryRequest = {
                filter: requestParameters.filter,
                sorts: requestParameters.sorts,
                start_cursor: requestParameters.start_cursor,
                page_size: requestParameters.page_size
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeQuery(requestParameters.databaseId, requestParameters.notionVersion, requestParameters.filterProperties, databaseExecuteQueryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a database
         * @param {DatabaseApiGetDatabaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatabase(requestParameters: DatabaseApiGetDatabaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatabaseGetDatabaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatabase(requestParameters.databaseId, requestParameters.notionVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a database
         * @param {DatabaseApiUpdateDatabaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDatabase(requestParameters: DatabaseApiUpdateDatabaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const databaseUpdateDatabaseRequest: DatabaseUpdateDatabaseRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                properties: requestParameters.properties
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDatabase(requestParameters.databaseId, requestParameters.notionVersion, databaseUpdateDatabaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatabaseApi - factory interface
 * @export
 */
export const DatabaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabaseApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a database
         * @param {DatabaseApiCreateNewDatabaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDatabase(requestParameters: DatabaseApiCreateNewDatabaseRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createNewDatabase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query a database
         * @param {DatabaseApiExecuteQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQuery(requestParameters: DatabaseApiExecuteQueryRequest, options?: AxiosRequestConfig): AxiosPromise<DatabaseExecuteQueryResponse> {
            return localVarFp.executeQuery(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a database
         * @param {DatabaseApiGetDatabaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatabase(requestParameters: DatabaseApiGetDatabaseRequest, options?: AxiosRequestConfig): AxiosPromise<DatabaseGetDatabaseResponse> {
            return localVarFp.getDatabase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a database
         * @param {DatabaseApiUpdateDatabaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatabase(requestParameters: DatabaseApiUpdateDatabaseRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateDatabase(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDatabase operation in DatabaseApi.
 * @export
 * @interface DatabaseApiCreateNewDatabaseRequest
 */
export type DatabaseApiCreateNewDatabaseRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatabaseApiCreateNewDatabase
    */
    readonly notionVersion: string
    
} & DatabaseCreateNewDatabaseRequest

/**
 * Request parameters for executeQuery operation in DatabaseApi.
 * @export
 * @interface DatabaseApiExecuteQueryRequest
 */
export type DatabaseApiExecuteQueryRequest = {
    
    /**
    * Identifier for a Notion database.
    * @type {string}
    * @memberof DatabaseApiExecuteQuery
    */
    readonly databaseId: string
    
    /**
    * 
    * @type {string}
    * @memberof DatabaseApiExecuteQuery
    */
    readonly notionVersion: string
    
    /**
    * A list of page property value IDs associated with the database. Use this param to limit the response to a specific page property value or values for pages that meet the `filter` criteria.
    * @type {string}
    * @memberof DatabaseApiExecuteQuery
    */
    readonly filterProperties?: string
    
} & DatabaseExecuteQueryRequest

/**
 * Request parameters for getDatabase operation in DatabaseApi.
 * @export
 * @interface DatabaseApiGetDatabaseRequest
 */
export type DatabaseApiGetDatabaseRequest = {
    
    /**
    * An identifier for the Notion database.
    * @type {string}
    * @memberof DatabaseApiGetDatabase
    */
    readonly databaseId: string
    
    /**
    * 
    * @type {string}
    * @memberof DatabaseApiGetDatabase
    */
    readonly notionVersion: string
    
}

/**
 * Request parameters for updateDatabase operation in DatabaseApi.
 * @export
 * @interface DatabaseApiUpdateDatabaseRequest
 */
export type DatabaseApiUpdateDatabaseRequest = {
    
    /**
    * identifier for a Notion database
    * @type {string}
    * @memberof DatabaseApiUpdateDatabase
    */
    readonly databaseId: string
    
    /**
    * 
    * @type {string}
    * @memberof DatabaseApiUpdateDatabase
    */
    readonly notionVersion?: string
    
} & DatabaseUpdateDatabaseRequest

/**
 * DatabaseApiGenerated - object-oriented interface
 * @export
 * @class DatabaseApiGenerated
 * @extends {BaseAPI}
 */
export class DatabaseApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a database
     * @param {DatabaseApiCreateNewDatabaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApiGenerated
     */
    public createNewDatabase(requestParameters: DatabaseApiCreateNewDatabaseRequest, options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).createNewDatabase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query a database
     * @param {DatabaseApiExecuteQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApiGenerated
     */
    public executeQuery(requestParameters: DatabaseApiExecuteQueryRequest, options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).executeQuery(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a database
     * @param {DatabaseApiGetDatabaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApiGenerated
     */
    public getDatabase(requestParameters: DatabaseApiGetDatabaseRequest, options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).getDatabase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a database
     * @param {DatabaseApiUpdateDatabaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApiGenerated
     */
    public updateDatabase(requestParameters: DatabaseApiUpdateDatabaseRequest, options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).updateDatabase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
