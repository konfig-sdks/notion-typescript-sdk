/* tslint:disable */
/* eslint-disable */
/*
Notion API

Notion is a new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommentCreateNew403Response } from '../models';
// @ts-ignore
import { CommentCreateNewRequest } from '../models';
// @ts-ignore
import { CommentCreateNewResponse } from '../models';
// @ts-ignore
import { CommentGetList403Response } from '../models';
// @ts-ignore
import { CommentGetListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CommentApi - axios parameter creator
 * @export
 */
export const CommentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a comment in a page or existing discussion thread.
         * @summary Create comment
         * @param {string} notionVersion 
         * @param {CommentCreateNewRequest} [commentCreateNewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (notionVersion: string, commentCreateNewRequest?: CommentCreateNewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notionVersion' is not null or undefined
            assertParamExists('createNew', 'notionVersion', notionVersion)
            const localVarPath = `/v1/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: commentCreateNewRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(commentCreateNewRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of un-resolved [Comment objects](ref:comment-object) from a page or block.
         * @summary Retrieve comments
         * @param {string} notionVersion 
         * @param {string} blockId Identifier for a Notion block or page
         * @param {string} [startCursor] If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.
         * @param {number} [pageSize] The number of items from the full list desired in the response. Maximum: 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (notionVersion: string, blockId: string, startCursor?: string, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notionVersion' is not null or undefined
            assertParamExists('getList', 'notionVersion', notionVersion)
            // verify required parameter 'blockId' is not null or undefined
            assertParamExists('getList', 'blockId', blockId)
            const localVarPath = `/v1/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (blockId !== undefined) {
                localVarQueryParameter['block_id'] = blockId;
            }

            if (startCursor !== undefined) {
                localVarQueryParameter['start_cursor'] = startCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (notionVersion != null) {
                localVarHeaderParameter['Notion-Version'] = String(notionVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/comments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentApi - functional programming interface
 * @export
 */
export const CommentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a comment in a page or existing discussion thread.
         * @summary Create comment
         * @param {CommentApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: CommentApiCreateNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentCreateNewResponse>> {
            const commentCreateNewRequest: CommentCreateNewRequest = {
                parent: requestParameters.parent,
                discussion_id: requestParameters.discussion_id,
                rich_text: requestParameters.rich_text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(requestParameters.notionVersion, commentCreateNewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of un-resolved [Comment objects](ref:comment-object) from a page or block.
         * @summary Retrieve comments
         * @param {CommentApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: CommentApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.notionVersion, requestParameters.blockId, requestParameters.startCursor, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommentApi - factory interface
 * @export
 */
export const CommentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentApiFp(configuration)
    return {
        /**
         * Creates a comment in a page or existing discussion thread.
         * @summary Create comment
         * @param {CommentApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: CommentApiCreateNewRequest, options?: AxiosRequestConfig): AxiosPromise<CommentCreateNewResponse> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of un-resolved [Comment objects](ref:comment-object) from a page or block.
         * @summary Retrieve comments
         * @param {CommentApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: CommentApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<CommentGetListResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNew operation in CommentApi.
 * @export
 * @interface CommentApiCreateNewRequest
 */
export type CommentApiCreateNewRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CommentApiCreateNew
    */
    readonly notionVersion: string
    
} & CommentCreateNewRequest

/**
 * Request parameters for getList operation in CommentApi.
 * @export
 * @interface CommentApiGetListRequest
 */
export type CommentApiGetListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CommentApiGetList
    */
    readonly notionVersion: string
    
    /**
    * Identifier for a Notion block or page
    * @type {string}
    * @memberof CommentApiGetList
    */
    readonly blockId: string
    
    /**
    * If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.
    * @type {string}
    * @memberof CommentApiGetList
    */
    readonly startCursor?: string
    
    /**
    * The number of items from the full list desired in the response. Maximum: 100
    * @type {number}
    * @memberof CommentApiGetList
    */
    readonly pageSize?: number
    
}

/**
 * CommentApiGenerated - object-oriented interface
 * @export
 * @class CommentApiGenerated
 * @extends {BaseAPI}
 */
export class CommentApiGenerated extends BaseAPI {
    /**
     * Creates a comment in a page or existing discussion thread.
     * @summary Create comment
     * @param {CommentApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiGenerated
     */
    public createNew(requestParameters: CommentApiCreateNewRequest, options?: AxiosRequestConfig) {
        return CommentApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of un-resolved [Comment objects](ref:comment-object) from a page or block.
     * @summary Retrieve comments
     * @param {CommentApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiGenerated
     */
    public getList(requestParameters: CommentApiGetListRequest, options?: AxiosRequestConfig) {
        return CommentApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
